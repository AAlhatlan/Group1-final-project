name: Deploy Ingress NGINX with Helm

on:
  push:
    branches:
      - groupTest
      - main
  workflow_dispatch:

jobs:
  deploy-ingress:
    name: Deploy Ingress NGINX
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: rg-group1-austriaeast
          cluster-name: grp1-aks
      
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version
      
      - name: Cleanup old Ingress installation
        continue-on-error: true
        run: |
          echo "Checking for existing Ingress installation in old namespace..."
          if helm list -n ingress-nginx | grep -q grp1-ingress; then
            echo "Uninstalling old Ingress from ingress-nginx namespace..."
            helm uninstall grp1-ingress -n ingress-nginx || true
            sleep 5
          fi
          
          # Clean up orphaned cluster-level resources
          kubectl delete ingressclass nginx --ignore-not-found=true || true
          kubectl delete clusterrole grp1-ingress-ingress-nginx --ignore-not-found=true || true
          kubectl delete clusterrolebinding grp1-ingress-ingress-nginx --ignore-not-found=true || true
          
          # Delete old namespace
          kubectl delete namespace ingress-nginx --ignore-not-found=true || true
          sleep 3
          echo "‚úÖ Cleaned up old Ingress installation"
      
      - name: Install Ingress NGINX
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          
          # Check if ingress is already installed
          if helm list -n ingress-nginx-l | grep -q grp1-ingress; then
            echo "Ingress NGINX already installed, upgrading..."
            helm upgrade grp1-ingress ingress-nginx/ingress-nginx \
              --namespace ingress-nginx-l \
              --wait \
              --reuse-values
          else
            echo "Installing Ingress NGINX..."
            
            # Install with custom CRM configuration  
            helm install grp1-ingress ingress-nginx/ingress-nginx \
              --namespace ingress-nginx-l \
              --create-namespace \
              --wait \
              --set controller.ingressClassResource.controllerValue="k8s.io/ingress-nginx" \
              --set controller.ingressClassByName=true \
              --set controller.ingressClassResource.name=nginx
          fi
      
      - name: Wait for LoadBalancer IP
        id: lb_ip
        run: |
          echo "Waiting for LoadBalancer IP..."
          timeout=300
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            LB_IP=$(kubectl get svc grp1-ingress-ingress-nginx-controller -n ingress-nginx-l -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$LB_IP" ] && [ "$LB_IP" != "null" ] && [ "$LB_IP" != "None" ]; then
              echo "LoadBalancer IP obtained: $LB_IP"
              echo "ip=$LB_IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Waiting for IP... ($elapsed seconds)"
            sleep 10
            elapsed=$((elapsed + 10))
          done
          echo "‚ö†Ô∏è Timeout waiting for LoadBalancer IP"
          exit 1
      
      - name: Display LoadBalancer Info
        run: |
          kubectl get svc grp1-ingress-ingress-nginx-controller -n ingress-nginx-l
          echo "‚úÖ Ingress NGINX installed with IP: ${{ steps.lb_ip.outputs.ip }}"
      
      - name: Ensure app namespace exists
        run: |
          if ! kubectl get namespace app > /dev/null 2>&1; then
            echo "Creating namespace 'app'..."
            kubectl create namespace app
          else
            echo "‚úÖ Namespace 'app' already exists"
          fi
      
      - name: Update Frontend ConfigMap with LB IP
        run: |
          LB_IP="${{ steps.lb_ip.outputs.ip }}"
          
          if [ -z "$LB_IP" ] || [ "$LB_IP" == "null" ]; then
            echo "‚ùå LoadBalancer IP is not available"
            exit 1
          fi
          
          echo "Updating ConfigMap with LoadBalancer IP: $LB_IP"
          kubectl create configmap app-frontend-config -n app \
            --from-literal=VITE_API_BASE_URL="http://$LB_IP.nip.io/app-api" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ Frontend ConfigMap updated with IP: $LB_IP"
      
      - name: Apply Ingress Resources
        run: |
          echo "Applying Ingress resources to app namespace..."
          kubectl apply -f k8s/frontend/ingress.yaml -n app
          kubectl apply -f k8s/backend/ingress.yaml -n app
          echo "‚úÖ Ingress resources applied successfully!"
      
      - name: Verify Ingress Configuration
        run: |
          echo "=== Checking Ingress Resources in 'app' namespace ==="
          echo ""
          echo "üìã Ingress List:"
          kubectl get ingress -n app
          echo ""
          echo "üìã Ingress Details:"
          kubectl get ingress -n app -o yaml
          echo ""
          echo "=== Checking IngressClass ==="
          kubectl get ingressclass
          echo ""
          echo "‚úÖ Ingress verification complete!"
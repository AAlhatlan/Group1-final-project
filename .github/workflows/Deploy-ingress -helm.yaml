name: Deploy Ingress NGINX with Helm

on:
  workflow_dispatch:

jobs:
  deploy-ingress:
    name: Deploy Ingress NGINX
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Install Ingress NGINX
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install grp1-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --wait
      
      - name: Wait for LoadBalancer IP
        run: |
          echo "Waiting for LoadBalancer IP..."
          timeout=300
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            LB_IP=$(kubectl get svc grp1-ingress-ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$LB_IP" ] && [ "$LB_IP" != "null" ]; then
              echo "LoadBalancer IP obtained: $LB_IP"
              echo "LB_IP=$LB_IP" >> $GITHUB_ENV
              exit 0
            fi
            echo "Waiting for IP... ($elapsed seconds)"
            sleep 10
            elapsed=$((elapsed + 10))
          done
          echo "⚠️ Timeout waiting for LoadBalancer IP"
          exit 1
      
      - name: Display LoadBalancer Info
        run: |
          kubectl get svc grp1-ingress-ingress-nginx-controller -n ingress-nginx
          echo "✅ Ingress NGINX installed with IP: $LB_IP"
      
      - name: Ensure app namespace exists
        run: |
          if ! kubectl get namespace app > /dev/null 2>&1; then
            echo "Creating namespace 'app'..."
            kubectl create namespace app
          else
            echo "✅ Namespace 'app' already exists"
          fi
      
      - name: Update Frontend ConfigMap with LB IP
        run: |
          if [ -z "$LB_IP" ]; then
            echo "❌ LoadBalancer IP is not available"
            exit 1
          fi
          
          kubectl create configmap frontend-config -n app \
            --from-literal=VITE_API_BASE_URL="http://$LB_IP.nip.io/app-api" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ Frontend ConfigMap updated with IP: $LB_IP"
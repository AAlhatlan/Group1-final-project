name: "Build & Push Frontend (Vite)"

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  workflow_dispatch:

env:
  FE_IMAGE: "docker.io/aalhatlan/fe-final-project"
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG || vars.KUBE_CONFIG || '' }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA || vars.KUBE_CONFIG_DATA || '' }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE || vars.K8S_NAMESPACE || 'grp1-app' }}
  BACKEND_INGRESS: ${{ vars.BACKEND_INGRESS_NAME || 'backend-services' }}

jobs:
  build_frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Version Tag
        id: version
        run: echo "frontend=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: aalhatlan
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Prepare kubeconfig (optional)
        id: kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "$KUBE_CONFIG" ] && [ -z "$KUBE_CONFIG_DATA" ]; then
            echo "configured=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          mkdir -p ~/.kube
          tmp=$(mktemp)
          decode_err=$(mktemp)
          cleanup() { rm -f "$tmp" "$decode_err"; }
          trap cleanup EXIT

          if [ -n "$KUBE_CONFIG_DATA" ]; then
            if printf "%s" "$KUBE_CONFIG_DATA" | base64 -d > "$tmp" 2>"$decode_err"; then
              mv "$tmp" ~/.kube/config
            else
              printf "%s" "$KUBE_CONFIG_DATA" > ~/.kube/config
            fi
          else
            printf "%s" "$KUBE_CONFIG" > ~/.kube/config
          fi
          chmod 600 ~/.kube/config

          if kubectl config view --minify >/dev/null 2>&1; then
            echo "configured=true" >> "$GITHUB_OUTPUT"
          else
            echo "configured=false" >> "$GITHUB_OUTPUT"
            rm -f ~/.kube/config
          fi

      - name: Resolve Backend URL
        id: backend_url
        shell: bash
        run: |
          set -euo pipefail
          default_url="http://localhost:8080"

          if [ "${{ steps.kubeconfig.outputs.configured }}" = "true" ]; then
            ingress="${BACKEND_INGRESS:-backend-services}"
            ns="${K8S_NAMESPACE:-default}"
            ip=$(kubectl -n "$ns" get ingress "$ingress" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            host=$(kubectl -n "$ns" get ingress "$ingress" -o jsonpath='{.spec.rules[0].host}' 2>/dev/null || true)

            if [ -n "$ip" ]; then
              url="http://$ip"
            elif [ -n "$host" ] && [ "$host" != "*" ]; then
              url="http://$host"
            else
              url="$default_url"
            fi
          else
            url="$default_url"
          fi

          # Append /api since frontend hits API gateway via /api path
          url="${url%/}/api"
          echo "backend_url=$url" >> "$GITHUB_OUTPUT"
          echo "Using backend URL: $url"

      - name: Build & Push Frontend (Vite)
        run: |
          docker build --platform linux/amd64 \
            --build-arg VITE_API_BASE_URL=${{ steps.backend_url.outputs.backend_url }} \
            -t ${{ env.FE_IMAGE }}:${{ steps.version.outputs.frontend }} \
            -t ${{ env.FE_IMAGE }}:latest \
            -f frontend/Dockerfile frontend

          docker push ${{ env.FE_IMAGE }}:${{ steps.version.outputs.frontend }}
          docker push ${{ env.FE_IMAGE }}:latest

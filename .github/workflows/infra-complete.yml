name: infra-complete

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.capture.outputs.kubeconfig }}
      key_vault_name: ${{ steps.capture.outputs.key_vault_name }}
      aks_uami_client_id: ${{ steps.capture.outputs.aks_uami_client_id }}
      tenant_id: ${{ steps.capture.outputs.tenant_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform apply
        working-directory: terraform
        env:
          TF_VAR_sql_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Capture Terraform outputs
        id: capture
        working-directory: terraform
        run: |
          echo "kubeconfig<<EOF" >> $GITHUB_OUTPUT
          terraform output -raw aks_kube_config >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "key_vault_name=$(terraform output -raw key_vault_name)" >> $GITHUB_OUTPUT
          echo "aks_uami_client_id=$(terraform output -raw aks_user_assigned_identity_client_id)" >> $GITHUB_OUTPUT
          echo "tenant_id=$(terraform output -raw tenant_id)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          printf '%s\n' "${{ needs.terraform.outputs.kubeconfig }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Install Secrets Store CSI driver
        run: |
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
          helm repo update
          helm upgrade --install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
            --namespace kube-system \
            --set secrets-store.csi.enableSecretRotation=true \
            --set linux.privileged=true

      - name: Install/upgrade Ingress NGINX controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install grp1-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --wait \
            --timeout=600s \
            --set controller.ingressClassResource.controllerValue="k8s.io/ingress-nginx" \
            --set controller.ingressClassByName=true \
            --set controller.service.type=LoadBalancer \
            --set controller.service.externalTrafficPolicy=Local

      - name: Apply namespaces and config maps
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/backend/configmap.yaml
          kubectl apply -f k8s/frontend/configmap.yaml

      - name: Apply SecretProviderClass and synced secret
        env:
          KEY_VAULT_NAME: ${{ needs.terraform.outputs.key_vault_name }}
          AKS_UAMI_CLIENT_ID: ${{ needs.terraform.outputs.aks_uami_client_id }}
          AZURE_TENANT_ID: ${{ needs.terraform.outputs.tenant_id }}
        run: |
          envsubst < k8s/backend/secretproviderclass.yaml | kubectl apply -f -
          kubectl apply -f k8s/backend/app-secret.yaml

      - name: Deploy backend workloads
        run: |
          kubectl apply -f k8s/backend/service.yaml
          kubectl apply -f k8s/backend/deployment.yaml
          kubectl apply -f k8s/backend/backendHPA.yaml
          kubectl rollout status deployment/app-backend-deployment -n app --timeout=180s

      - name: Deploy frontend workloads
        run: |
          kubectl apply -f k8s/frontend/service.yaml
          kubectl apply -f k8s/frontend/deployment.yaml
          kubectl apply -f k8s/frontend/frontendHPA.yaml
          kubectl rollout status deployment/app-frontend-deployment -n app --timeout=180s

      - name: Deploy ingress and monitoring
        run: |
          kubectl apply -f k8s/ingress-controller/ingress-nginx.yaml
          kubectl apply -f k8s/backend/ingress.yaml
          kubectl apply -f k8s/frontend/ingress.yaml
          kubectl apply -f k8s/monitoring/values.yaml
          kubectl apply -f k8s/monitoring/backend-monitor.yaml
          kubectl apply -f k8s/monitoring/frontend-monitor.yaml
          kubectl apply -f k8s/monitoring/alerts.yaml

      - name: Validate cluster health
        run: |
          kubectl get pods -n app
          kubectl get ing -A
          kubectl exec -n app deploy/app-backend-deployment -- ls /mnt/secrets-store

name: infra-complete

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.capture.outputs.kubeconfig }}
      key_vault_name: ${{ steps.capture.outputs.key_vault_name }}
      aks_uami_client_id: ${{ steps.capture.outputs.aks_uami_client_id }}
      tenant_id: ${{ steps.capture.outputs.tenant_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform apply
        working-directory: terraform
        env:
          TF_VAR_sql_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Capture Terraform outputs
        id: capture
        working-directory: terraform
        run: |
          KUBECONFIG_B64=$(terraform output -raw aks_kube_config | base64 | tr -d '\n')
          echo "kubeconfig=$KUBECONFIG_B64" >> $GITHUB_OUTPUT
          echo "key_vault_name=$(terraform output -raw key_vault_name)" >> $GITHUB_OUTPUT
          echo "aks_uami_client_id=$(terraform output -raw aks_user_assigned_identity_client_id)" >> $GITHUB_OUTPUT
          echo "tenant_id=$(terraform output -raw tenant_id)" >> $GITHUB_OUTPUT
          echo "ingress_static_ip=$(terraform output -raw ingress_static_ip)" >> $GITHUB_OUTPUT
          AKS_NODE_RG=$(terraform output -raw aks_node_resource_group)
          echo "aks_node_rg=$AKS_NODE_RG" >> $GITHUB_OUTPUT


  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    environment: production
    env:
      INGRESS_STATIC_IP: ${{ needs.terraform.outputs.ingress_static_ip }}
      AKS_NODE_RG: ${{ needs.terraform.outputs.aks_node_rg }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ needs.terraform.outputs.kubeconfig }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Test kubectl connectivity
        run: kubectl get nodes
      
      - name: Install Helm
        uses: azure/setup-helm@v4


      # ✅ Use Static IP from Terraform
      - name: Get Static IP from Terraform
        run: |
          echo "✅ Using Static IP from Terraform: $INGRESS_STATIC_IP"
          echo "✅ AKS Node Resource Group: $AKS_NODE_RG"

      # ✅ Ingress Install/Upgrade
      - name: Install/Upgrade Ingress NGINX (with static IP)
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install grp1-ingress ingress-nginx/ingress-nginx \
              --namespace ingress-nginx \
              --create-namespace \
            --atomic \
              --wait \
              --timeout=10m \
            --set controller.service.loadBalancerIP="$INGRESS_STATIC_IP" \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"="$AKS_NODE_RG"


      # ✅ Namespaces and Config
      - name: Apply namespaces and config maps
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/backend/configmap.yaml
          kubectl apply -f k8s/frontend/configmap.yaml


      # ✅ Key Vault CSI Driver + Secret Sync
      - name: Apply SecretProviderClass and Synced secret
        env:
          KEY_VAULT_NAME: ${{ needs.terraform.outputs.key_vault_name }}
          AKS_UAMI_CLIENT_ID: ${{ needs.terraform.outputs.aks_uami_client_id }}
          AZURE_TENANT_ID: ${{ needs.terraform.outputs.tenant_id }}
        run: |
          envsubst < k8s/backend/secretproviderclass.yaml | kubectl apply -f -
          kubectl apply -f k8s/backend/app-secret.yaml


      # ✅ Backend Deploy (مع انتظار أطول + صحي)
      - name: Deploy backend workloads
        run: |
          kubectl apply -f k8s/backend/service.yaml
          kubectl apply -f k8s/backend/deployment.yaml
          kubectl apply -f k8s/backend/backendHPA.yaml
          
          # 🔁 انتظار حتى كل Pods تكون جاهزة
          kubectl rollout status deploy/app-backend-deployment -n app --timeout=600s
          kubectl wait pods -n app -l app=backend --for=condition=Ready --timeout=300s


      # ✅ Frontend Deploy
      - name: Deploy frontend workloads
        run: |
          kubectl apply -f k8s/frontend/service.yaml
          kubectl apply -f k8s/frontend/deployment.yaml
          kubectl apply -f k8s/frontend/frontendHPA.yaml
          kubectl rollout status deploy/app-frontend-deployment -n app --timeout=300s


      # ✅ Monitoring with Helm (✅ Fixed)
      - name: Deploy/Upgrade Monitoring Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
              --namespace monitoring \
              --create-namespace \
              --values k8s/monitoring/values.yaml \
            --atomic \
              --wait \
            --timeout=15m

      
      # ✅ Ingress Rules
      - name: Apply ingress rules
        run: |
          kubectl apply -f k8s/backend/ingress.yaml
          kubectl apply -f k8s/frontend/ingress.yaml


      # ✅ Final cluster health check
      - name: Validate cluster health
        run: |
          kubectl get pods -A
          kubectl get ing -A
          kubectl get svc -A
